#include "StdAfx.h"
#include "SWkeWebkit.h"
#include <Imm.h>
#pragma comment(lib,"imm32.lib")
#pragma comment(lib,"msimg32.lib")
namespace SOUI
{
typedef void         (_cdecl *FUN_wkeInitialize)(const char* cookie_path);
typedef void         (_cdecl *FUN_wkeDestory)();
typedef wkeWebView*  (_cdecl *FUN_wkeCreateWebView)();
typedef wkeWebView*  (_cdecl *FUN_wkeGetWebView)(const char* name);
typedef void         (_cdecl *FUN_wkeDestroyWebView)(wkeWebView* webView);
typedef void         (_cdecl *FUN_wkeLoadURLW)(wkeWebView* webView, const wchar_t* url);
typedef void         (_cdecl *FUN_wkeReload)(wkeWebView* webView);
typedef void         (_cdecl *FUN_wkeResize)(wkeWebView* webView, int w, int h);
typedef void*        (_cdecl *FUN_wkeGetViewDC)(wkeWebView* webView);
typedef bool         (_cdecl *FUN_wkeGoBack)(wkeWebView* webView);
typedef bool         (_cdecl *FUN_wkeGoForward)(wkeWebView* webView);
typedef bool         (_cdecl *FUN_wkeFireMouseEvent)(wkeWebView* webView, unsigned int message, int x, int y, unsigned int flags);
typedef bool         (_cdecl *FUN_wkeFireMouseWheelEvent)(wkeWebView* webView, int x, int y, int delta, unsigned int flags);
typedef bool         (_cdecl *FUN_wkeFireKeyUpEvent)(wkeWebView* webView, unsigned int virtualKeyCode, unsigned int flags, bool systemKey);
typedef bool         (_cdecl *FUN_wkeFireKeyDownEvent)(wkeWebView* webView, unsigned int virtualKeyCode, unsigned int flags, bool systemKey);
typedef bool         (_cdecl *FUN_wkeFireKeyPressEvent)(wkeWebView* webView, unsigned int charCode, unsigned int flags, bool systemKey);
typedef void         (_cdecl *FUN_wkeSetFocus)(wkeWebView* webView);
typedef void         (_cdecl *FUN_wkeKillFocus)(wkeWebView* webView);
typedef wkeRect      (_cdecl *FUN_wkeGetCaretRect)(wkeWebView* webView);
typedef void         (_cdecl *FUN_wkeOnPaintUpdated)(wkeWebView* webView, wkePaintUpdatedCallback callback, void* callbackParam);

    static HMODULE m_hModWke;
    static FUN_wkeInitialize          __wkeInitialize;
    static FUN_wkeDestory             __wkeDestory;
    static FUN_wkeCreateWebView       __wkeCreateWebView;
    static FUN_wkeGetWebView          __wkeGetWebView;
    static FUN_wkeDestroyWebView      __wkeDestroyWebView;
    static FUN_wkeLoadURLW            __wkeLoadURLW;
    static FUN_wkeReload              __wkeReload;
    static FUN_wkeResize              __wkeResize;
    static FUN_wkeGetViewDC           __wkeGetViewDC;
    static FUN_wkeGoBack              __wkeGoBack;
    static FUN_wkeGoForward           __wkeGoForward;
    static FUN_wkeFireMouseEvent      __wkeFireMouseEvent;
    static FUN_wkeFireMouseWheelEvent __wkeFireMouseWheelEvent;
    static FUN_wkeFireKeyUpEvent      __wkeFireKeyUpEvent;
    static FUN_wkeFireKeyDownEvent    __wkeFireKeyDownEvent;
    static FUN_wkeFireKeyPressEvent   __wkeFireKeyPressEvent;
    static FUN_wkeSetFocus            __wkeSetFocus;
    static FUN_wkeKillFocus           __wkeKillFocus;
    static FUN_wkeGetCaretRect        __wkeGetCaretRect;
    static FUN_wkeOnPaintUpdated      __wkeOnPaintUpdated;
    //////////////////////////////////////////////////////////////////////////
    // SWkeLoader
    SWkeLoader::SWkeLoader()
    {
    }


    SWkeLoader::~SWkeLoader()
    {
        //if(m_hModWke) FreeLibrary(m_hModWke);
    }
    
    BOOL SWkeLoader::Init( LPCTSTR pszDll )
    {
        if(m_hModWke) return TRUE;
        HMODULE m_hModWke=LoadLibrary(pszDll);
        if(!m_hModWke) return FALSE;
        
        __wkeInitialize = (FUN_wkeInitialize)GetProcAddress(m_hModWke,"wkeInitialize");
        __wkeDestory = (FUN_wkeDestory)GetProcAddress(m_hModWke,"wkeDestory");
        __wkeCreateWebView = (FUN_wkeCreateWebView)GetProcAddress(m_hModWke,"wkeCreateWebView");
        __wkeGetWebView = (FUN_wkeGetWebView)GetProcAddress(m_hModWke,"wkeGetWebView");
        __wkeDestroyWebView = (FUN_wkeDestroyWebView)GetProcAddress(m_hModWke,"wkeDestroyWebView");
        __wkeLoadURLW = (FUN_wkeLoadURLW)GetProcAddress(m_hModWke,"wkeLoadURLW");
        __wkeReload = (FUN_wkeReload)GetProcAddress(m_hModWke,"wkeReload");
        __wkeResize = (FUN_wkeResize)GetProcAddress(m_hModWke,"wkeResize");
        __wkeGetViewDC = (FUN_wkeGetViewDC)GetProcAddress(m_hModWke,"wkeGetViewDC");
        __wkeGoBack = (FUN_wkeGoBack)GetProcAddress(m_hModWke,"wkeGoBack");
        __wkeGoForward = (FUN_wkeGoForward)GetProcAddress(m_hModWke,"wkeGoForward");
        __wkeFireMouseEvent = (FUN_wkeFireMouseEvent)GetProcAddress(m_hModWke,"wkeFireMouseEvent");
        __wkeFireMouseWheelEvent = (FUN_wkeFireMouseWheelEvent)GetProcAddress(m_hModWke,"wkeFireMouseWheelEvent");
        __wkeFireKeyUpEvent = (FUN_wkeFireKeyUpEvent)GetProcAddress(m_hModWke,"wkeFireKeyUpEvent");
        __wkeFireKeyDownEvent = (FUN_wkeFireKeyDownEvent)GetProcAddress(m_hModWke,"wkeFireKeyDownEvent");
        __wkeFireKeyPressEvent = (FUN_wkeFireKeyPressEvent)GetProcAddress(m_hModWke,"wkeFireKeyPressEvent");
        __wkeSetFocus = (FUN_wkeSetFocus)GetProcAddress(m_hModWke,"wkeSetFocus");
        __wkeKillFocus = (FUN_wkeKillFocus)GetProcAddress(m_hModWke,"wkeKillFocus");
        __wkeGetCaretRect = (FUN_wkeGetCaretRect)GetProcAddress(m_hModWke,"wkeGetCaretRect");
        __wkeOnPaintUpdated = (FUN_wkeOnPaintUpdated)GetProcAddress(m_hModWke,"wkeOnPaintUpdated");

        if(!__wkeInitialize 
            || !__wkeDestory
            || !__wkeCreateWebView
            || !__wkeDestroyWebView )
        {
            FreeLibrary(m_hModWke);
            m_hModWke = 0;
            return FALSE;
        }
        __wkeInitialize(0);
        return TRUE;
    }



    //////////////////////////////////////////////////////////////////////////
    // SWkeWebkit
    
    SWkeWebkit::SWkeWebkit(void):m_pWebView(NULL)
    {
		m_bFocusable = true;
    }

    SWkeWebkit::~SWkeWebkit(void)
    {
    }

    void SWkeWebkit::OnPaint(IRenderTarget *pRT)
    {
        CRect rcClip;
        pRT->GetClipBox(&rcClip);
        CRect rcClient;
        GetClientRect(&rcClient);
        CRect rcInvalid;
        rcInvalid.IntersectRect(&rcClip,&rcClient);
        HDC hdc=pRT->GetDC();
        if(GetStyle().m_byAlpha!=0xff)
        {
            BLENDFUNCTION bf={AC_SRC_OVER,0,GetStyle().m_byAlpha,AC_SRC_ALPHA };
            AlphaBlend(hdc,rcInvalid.left,rcInvalid.top,rcInvalid.Width(),rcInvalid.Height(),(HDC)__wkeGetViewDC(m_pWebView),rcInvalid.left-rcClient.left,rcInvalid.top-rcClient.top,rcInvalid.Width(),rcInvalid.Height(),bf);
        }else
        {
            BitBlt(hdc,rcInvalid.left,rcInvalid.top,rcInvalid.Width(),rcInvalid.Height(),(HDC)__wkeGetViewDC(m_pWebView),rcInvalid.left-rcClient.left,rcInvalid.top-rcClient.top,SRCCOPY);
        }
        pRT->ReleaseDC(hdc);
    }

    void SWkeWebkit::OnSize( UINT nType, CSize size )
    {
        __super::OnSize(nType,size);
        __wkeResize(m_pWebView,size.cx,size.cy);
        //m_pWebView->tick();
    }

    static void _cdecl wkePaintUpdatedCallback(wkeWebView* webView, void* param, const void* hdc, int x, int y, int cx, int cy)
    {
        SWkeWebkit *pSWkeWebkit = (SWkeWebkit*)param;
        pSWkeWebkit->onBufUpdated((HDC)hdc, x, y, cx, cy);
    }
    void SWkeWebkit::goBack()
    {
        __wkeGoBack(m_pWebView);
    }

    void SWkeWebkit::goForward()
    {
        __wkeGoForward(m_pWebView);
    }
    void SWkeWebkit::reload()
    {
        __wkeReload(m_pWebView);
    }
 
    int SWkeWebkit::OnCreate( void * )
    {
        m_pWebView = __wkeCreateWebView();
        if(!m_pWebView) return 1;
        __wkeOnPaintUpdated(m_pWebView, wkePaintUpdatedCallback, this);
        __wkeLoadURLW(m_pWebView,m_strUrl);
        SetTimer(TM_TICKER,50); //由于timer不够及时，idle又限制了只在当前的消息循环中有效，使用timer和onidle一起更新浏览器
        return 0;
	}

	void SWkeWebkit::OnDestroy()
	{
		if(m_pWebView) __wkeDestroyWebView(m_pWebView);
	}

	LRESULT SWkeWebkit::OnMouseEvent( UINT message, WPARAM wParam,LPARAM lParam)
	{
		if (message == WM_LBUTTONDOWN || message == WM_MBUTTONDOWN || message == WM_RBUTTONDOWN)
		{
			SetFocus();
			SetCapture();
		}
		else if (message == WM_LBUTTONUP || message == WM_MBUTTONUP || message == WM_RBUTTONUP)
		{
			ReleaseCapture();
		}

		CRect rcClient;
		GetClientRect(&rcClient);

		int x = GET_X_LPARAM(lParam)-rcClient.left;
		int y = GET_Y_LPARAM(lParam)-rcClient.top;

		unsigned int flags = 0;

		if (wParam & MK_CONTROL)
			flags |= WKE_CONTROL;
		if (wParam & MK_SHIFT)
			flags |= WKE_SHIFT;

		if (wParam & MK_LBUTTON)
			flags |= WKE_LBUTTON;
		if (wParam & MK_MBUTTON)
			flags |= WKE_MBUTTON;
		if (wParam & MK_RBUTTON)
			flags |= WKE_RBUTTON;

		bool bHandled = __wkeFireMouseEvent(m_pWebView,message, x, y, flags);
		SetMsgHandled(bHandled);
		return 0;
	}

	LRESULT SWkeWebkit::OnKeyDown( UINT uMsg, WPARAM wParam,LPARAM lParam )
	{
		unsigned int flags = 0;
		if (HIWORD(lParam) & KF_REPEAT)
			flags |= WKE_REPEAT;
		if (HIWORD(lParam) & KF_EXTENDED)
			flags |= WKE_EXTENDED;

		SetMsgHandled(__wkeFireKeyDownEvent(m_pWebView,wParam, flags, false));
		return 0;
	}

	LRESULT SWkeWebkit::OnKeyUp( UINT uMsg, WPARAM wParam,LPARAM lParam )
	{
		unsigned int flags = 0;
		if (HIWORD(lParam) & KF_REPEAT)
			flags |= WKE_REPEAT;
		if (HIWORD(lParam) & KF_EXTENDED)
			flags |= WKE_EXTENDED;

		SetMsgHandled(__wkeFireKeyUpEvent(m_pWebView,wParam, flags, false));
		return 0;
	}

	LRESULT SWkeWebkit::OnMouseWheel( UINT uMsg, WPARAM wParam,LPARAM lParam )
	{
		POINT pt;
		pt.x = GET_X_LPARAM(lParam);
		pt.y = GET_Y_LPARAM(lParam);

		CRect rc;
		GetWindowRect(&rc);
		pt.x -= rc.left;
		pt.y -= rc.top;

		int delta = GET_WHEEL_DELTA_WPARAM(wParam);

		unsigned int flags = 0;

		if (wParam & MK_CONTROL)
			flags |= WKE_CONTROL;
		if (wParam & MK_SHIFT)
			flags |= WKE_SHIFT;

		if (wParam & MK_LBUTTON)
			flags |= WKE_LBUTTON;
		if (wParam & MK_MBUTTON)
			flags |= WKE_MBUTTON;
		if (wParam & MK_RBUTTON)
			flags |= WKE_RBUTTON;

		//flags = wParam;

		BOOL handled = __wkeFireMouseWheelEvent(m_pWebView,pt.x, pt.y, delta, flags);
		SetMsgHandled(handled);

		return handled;
	}

	LRESULT SWkeWebkit::OnChar( UINT uMsg, WPARAM wParam,LPARAM lParam )
	{
		unsigned int charCode = wParam;
		unsigned int flags = 0;
		if (HIWORD(lParam) & KF_REPEAT)
			flags |= WKE_REPEAT;
		if (HIWORD(lParam) & KF_EXTENDED)
			flags |= WKE_EXTENDED;

		//flags = HIWORD(lParam);

		SetMsgHandled(__wkeFireKeyPressEvent(m_pWebView,charCode, flags, false));
		return 0;
	}

	LRESULT SWkeWebkit::OnImeStartComposition( UINT uMsg, WPARAM wParam,LPARAM lParam )
	{
		wkeRect caret = __wkeGetCaretRect(m_pWebView);

		CRect rcClient;
		GetClientRect(&rcClient);

		CANDIDATEFORM form;
		form.dwIndex = 0;
		form.dwStyle = CFS_EXCLUDE;
		form.ptCurrentPos.x = caret.x + rcClient.left;
		form.ptCurrentPos.y = caret.y + caret.h + rcClient.top;
		form.rcArea.top = caret.y + rcClient.top;
		form.rcArea.bottom = caret.y + caret.h + rcClient.top;
		form.rcArea.left = caret.x + rcClient.left;
		form.rcArea.right = caret.x + caret.w + rcClient.left;
		COMPOSITIONFORM compForm;
		compForm.ptCurrentPos=form.ptCurrentPos;
		compForm.rcArea=form.rcArea;
		compForm.dwStyle=CFS_POINT;

		HWND hWnd=GetContainer()->GetHostHwnd();
		HIMC hIMC = ImmGetContext(hWnd);
		ImmSetCandidateWindow(hIMC, &form);
		ImmSetCompositionWindow(hIMC,&compForm);
		ImmReleaseContext(hWnd, hIMC);
		return 0;
	}

	void SWkeWebkit::OnSetFocus(SWND wndOld)
	{
	    __super::OnSetCursor(wndOld);
		__wkeSetFocus(m_pWebView);
	}

	void SWkeWebkit::OnKillFocus(SWND wndFocus)
	{
		__wkeKillFocus(m_pWebView);
		__super::OnKillFocus(wndFocus);
	}

	void SWkeWebkit::OnTimer( char cTimerID )
	{
		if(cTimerID==TM_TICKER)
		{
			//m_pWebView->tick();
		}
	}

	void SWkeWebkit::onBufUpdated( const HDC hdc,int x, int y, int cx, int cy )
	{
		CRect rcClient;
		GetClientRect(&rcClient);
		CRect rcInvalid(CPoint(x,y),CSize(cx,cy));
		rcInvalid.OffsetRect(rcClient.TopLeft());
		InvalidateRect(rcInvalid);
	}

    BOOL SWkeWebkit::OnIdle()
    {
        //m_pWebView->tick();
        return TRUE;
    }

	BOOL SWkeWebkit::OnSetCursor( const CPoint &pt )
	{
		return TRUE;
	}

	BOOL SWkeWebkit::OnAttrUrl( SStringW strValue, BOOL bLoading )
	{
		m_strUrl=strValue;
		if(!bLoading) __wkeLoadURLW(m_pWebView, m_strUrl);
		return !bLoading;
	}



}

